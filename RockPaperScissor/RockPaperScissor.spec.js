const { rockPaperScissors } = require('./rockPaperScissor');

const tests = {
  '1': [['rock'], ['paper'], ['scissor']],
  '2': [
    ['rock', 'rock'],
    ['rock', 'paper'],
    ['rock', 'scissor'],
    ['paper', 'rock'],
    ['paper', 'paper'],
    ['paper', 'scissor'],
    ['scissor', 'rock'],
    ['scissor', 'paper'],
    ['scissor', 'scissor'],
  ],
  '3': [
    ['rock', 'rock', 'rock'],
    ['rock', 'rock', 'paper'],
    ['rock', 'rock', 'scissor'],
    ['rock', 'paper', 'rock'],
    ['rock', 'paper', 'paper'],
    ['rock', 'paper', 'scissor'],
    ['rock', 'scissor', 'rock'],
    ['rock', 'scissor', 'paper'],
    ['rock', 'scissor', 'scissor'],
    ['paper', 'rock', 'rock'],
    ['paper', 'rock', 'paper'],
    ['paper', 'rock', 'scissor'],
    ['paper', 'paper', 'rock'],
    ['paper', 'paper', 'paper'],
    ['paper', 'paper', 'scissor'],
    ['paper', 'scissor', 'rock'],
    ['paper', 'scissor', 'paper'],
    ['paper', 'scissor', 'scissor'],
    ['scissor', 'rock', 'rock'],
    ['scissor', 'rock', 'paper'],
    ['scissor', 'rock', 'scissor'],
    ['scissor', 'paper', 'rock'],
    ['scissor', 'paper', 'paper'],
    ['scissor', 'paper', 'scissor'],
    ['scissor', 'scissor', 'rock'],
    ['scissor', 'scissor', 'paper'],
    ['scissor', 'scissor', 'scissor'],
  ],
  '4': [
    ['rock', 'rock', 'rock', 'rock'],
    ['rock', 'rock', 'rock', 'paper'],
    ['rock', 'rock', 'rock', 'scissor'],
    ['rock', 'rock', 'paper', 'rock'],
    ['rock', 'rock', 'paper', 'paper'],
    ['rock', 'rock', 'paper', 'scissor'],
    ['rock', 'rock', 'scissor', 'rock'],
    ['rock', 'rock', 'scissor', 'paper'],
    ['rock', 'rock', 'scissor', 'scissor'],
    ['rock', 'paper', 'rock', 'rock'],
    ['rock', 'paper', 'rock', 'paper'],
    ['rock', 'paper', 'rock', 'scissor'],
    ['rock', 'paper', 'paper', 'rock'],
    ['rock', 'paper', 'paper', 'paper'],
    ['rock', 'paper', 'paper', 'scissor'],
    ['rock', 'paper', 'scissor', 'rock'],
    ['rock', 'paper', 'scissor', 'paper'],
    ['rock', 'paper', 'scissor', 'scissor'],
    ['rock', 'scissor', 'rock', 'rock'],
    ['rock', 'scissor', 'rock', 'paper'],
    ['rock', 'scissor', 'rock', 'scissor'],
    ['rock', 'scissor', 'paper', 'rock'],
    ['rock', 'scissor', 'paper', 'paper'],
    ['rock', 'scissor', 'paper', 'scissor'],
    ['rock', 'scissor', 'scissor', 'rock'],
    ['rock', 'scissor', 'scissor', 'paper'],
    ['rock', 'scissor', 'scissor', 'scissor'],
    ['paper', 'rock', 'rock', 'rock'],
    ['paper', 'rock', 'rock', 'paper'],
    ['paper', 'rock', 'rock', 'scissor'],
    ['paper', 'rock', 'paper', 'rock'],
    ['paper', 'rock', 'paper', 'paper'],
    ['paper', 'rock', 'paper', 'scissor'],
    ['paper', 'rock', 'scissor', 'rock'],
    ['paper', 'rock', 'scissor', 'paper'],
    ['paper', 'rock', 'scissor', 'scissor'],
    ['paper', 'paper', 'rock', 'rock'],
    ['paper', 'paper', 'rock', 'paper'],
    ['paper', 'paper', 'rock', 'scissor'],
    ['paper', 'paper', 'paper', 'rock'],
    ['paper', 'paper', 'paper', 'paper'],
    ['paper', 'paper', 'paper', 'scissor'],
    ['paper', 'paper', 'scissor', 'rock'],
    ['paper', 'paper', 'scissor', 'paper'],
    ['paper', 'paper', 'scissor', 'scissor'],
    ['paper', 'scissor', 'rock', 'rock'],
    ['paper', 'scissor', 'rock', 'paper'],
    ['paper', 'scissor', 'rock', 'scissor'],
    ['paper', 'scissor', 'paper', 'rock'],
    ['paper', 'scissor', 'paper', 'paper'],
    ['paper', 'scissor', 'paper', 'scissor'],
    ['paper', 'scissor', 'scissor', 'rock'],
    ['paper', 'scissor', 'scissor', 'paper'],
    ['paper', 'scissor', 'scissor', 'scissor'],
    ['scissor', 'rock', 'rock', 'rock'],
    ['scissor', 'rock', 'rock', 'paper'],
    ['scissor', 'rock', 'rock', 'scissor'],
    ['scissor', 'rock', 'paper', 'rock'],
    ['scissor', 'rock', 'paper', 'paper'],
    ['scissor', 'rock', 'paper', 'scissor'],
    ['scissor', 'rock', 'scissor', 'rock'],
    ['scissor', 'rock', 'scissor', 'paper'],
    ['scissor', 'rock', 'scissor', 'scissor'],
    ['scissor', 'paper', 'rock', 'rock'],
    ['scissor', 'paper', 'rock', 'paper'],
    ['scissor', 'paper', 'rock', 'scissor'],
    ['scissor', 'paper', 'paper', 'rock'],
    ['scissor', 'paper', 'paper', 'paper'],
    ['scissor', 'paper', 'paper', 'scissor'],
    ['scissor', 'paper', 'scissor', 'rock'],
    ['scissor', 'paper', 'scissor', 'paper'],
    ['scissor', 'paper', 'scissor', 'scissor'],
    ['scissor', 'scissor', 'rock', 'rock'],
    ['scissor', 'scissor', 'rock', 'paper'],
    ['scissor', 'scissor', 'rock', 'scissor'],
    ['scissor', 'scissor', 'paper', 'rock'],
    ['scissor', 'scissor', 'paper', 'paper'],
    ['scissor', 'scissor', 'paper', 'scissor'],
    ['scissor', 'scissor', 'scissor', 'rock'],
    ['scissor', 'scissor', 'scissor', 'paper'],
    ['scissor', 'scissor', 'scissor', 'scissor'],
  ],
};

describe('Rock Paper Scissor testing suite', () => {
  it('should return an array', () => {
    expect(Array.isArray(rockPaperScissors(1))).toBeTruthy();
  });
  it('should return length of 3', () => {
    expect(rockPaperScissors(1).length).toBe(3);
  });
  it('should return the correct array', () => {
    for (let i = 1; i < 5; i++) {
      expect(rockPaperScissors(i)).toMatchObject(tests[i]);
    }
  });
  it('should return a overall length of ', () => {
    expect(rockPaperScissors(11).length).toBe(177147);
  });
});
